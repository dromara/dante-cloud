server:
  port: 8847
  servlet:
    session:
      timeout: 2h
  error:
    include-exception: true
    include-message: always
    include-stacktrace: always
    include-binding-errors: always
spring:
  application:
    name:  @artifactId@
  profiles:
    active: development-postgresql
  data:
    redis:
      repositories:
        enabled: false
  session:
    timeout: ${server.servlet.session.timeout}
    redis:
      repository-type: indexed
      flush-mode: immediate
  http:
    client:
      factory: jdk

sms:
  is-print: false

jasypt:
  encryptor:
    password: ${JASPYT_HOME:2bda7d3a-dba1-45a4-b08e-cbd731a0418e}
---
# 开发环境配置
spring:
  config:
    activate:
      on-profile: development-postgresql
  sql:
    init:
      mode: never
      platform: postgresql
      continue-on-error: true
      encoding: UTF-8
      username: ${spring.datasource.username}
      password: ${spring.datasource.password}
      # 第一种方式启动的时候 Jpa 会自动创建表，import.sql 只负责创建表单后的初始化数据。第二种方式启动的时候不会创建表，需要在初始化脚本中判断表是否存在，再初始化脚本的步骤
      # refer: https://www.cnblogs.com/ityouknow/p/7089170.html
      data-locations:
        - classpath:sqls/oss-data-postgresql.sql
  #        - classpath:sqls/oss-data-mysql.sql

  datasource:
    driver-class-name: com.p6spy.engine.spy.P6SpyDriver
    url: jdbc:p6spy:postgresql://localhost:15432/dante_athena
    username: athena
    password: athena
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      pool-name: Hikari
      connection-test-query: SELECT 1
      minimum-idle: 5
      maximum-pool-size: 20
      # Lowest acceptable connection timeout is 250 ms. Default: 30000 (30 seconds)
      connection-timeout: 30000
      # The minimum allowed value is 10000ms (10 seconds). Default: 600000 (10 minutes)
      idle-timeout: 120000
      # We strongly recommend setting this value, and it should be at least 30 seconds less than any database or infrastructure imposed connection time limit. Default: 1800000 (30 minutes)
      max-lifetime: 1800000
      # Lowest acceptable validation timeout is 250 ms. Default: 5000
      validation-timeout: 5000
      leak-detection-threshold: 60000
      data-source-properties:
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        cachePrepStmts: true
        cacheResultSetMetadata: true
        cacheServerConfiguration: true
        useServerPrepStmts: true
        useLocalSessionState: true
        rewriteBatchedStatement: true
        elideSetAutoCommits: true
        maintainTimeStats: false
  jpa:
    database: postgresql
    database-platform: ${spring.jpa.database}
    generate-ddl: true
    open-in-view: true
    hibernate:
      # DDL mode. This is actually a shortcut for the "hibernate.hbm2ddl.auto" property. Default to "create-drop" when using an embedded database, "none" otherwise.spring.jpa.hibernate.ddl-auto=update
      ddl-auto: update
      naming:
        physical-strategy: cn.herodotus.engine.data.hibernate.HerodotusPhysicalNamingStrategy
    properties:
      jakarta:
        persistence:
          sharedCache:
            mode: ENABLE_SELECTIVE
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        show_sql: false
        generate_statistics: false
        order_inserts: true
        order_updates: true
        default_batch_fetch_size: 30
        cache:
          use_query_cache: true
          use_second_level_cache: true
          use_minimal_puts: true
          region:
            factory_class: cn.herodotus.engine.data.hibernate.spi.cache.HerodotusRegionFactory
        jakarta:
          cache:
            missing_cache_strategy: create
        boot:
          allow_jdbc_metadata_access: true
        connection:
          handling_mode: DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION
        jdbc:
          batch_size: 50
        query:
          in_clause_parameter_padding: true
          fail_on_pagination_over_collection_fetch: true
          optimizer:
            enabled: true
  data:
    redis:
      database: 4
      host: 192.168.101.10
      password:
      port: 16379
      timeout: 3000ms
      lettuce:
        pool:
          enabled: true
          # 最大活跃连接数 (根据负载动态调整)。计算公式：max-active = (平均QPS × 平均耗时(秒)) / 可用实例数 + 缓冲值
          max-active: 64
          # 最大空闲连接数 (建议max-active的50-75%)。足够覆盖流量波谷，避免频繁创建连接
          max-idle: 32
          # 最小空闲连接数 (保持预热连接)。保持预热连接，应对突发流量
          min-idle: 8
          # 短等待避免线程阻塞，超时快速失败
          max-wait: 5000ms
          # 空闲连接检查间隔
          time-between-eviction-runs: 30s
        shutdown-timeout: 200ms
    redisson:
      enabled: false
      single-server-config:
        address: redis://${spring.data.redis.host}:${spring.data.redis.port}
  #        password: ${spring.data.redis.password}
  thymeleaf:
    mode: HTML
    cache: false
  security:
    oauth2:
      resourceserver:
        opaquetoken:
          client-id: 14a9cf797931430896ad13a6b1855611
          client-secret: a05fe1fc50ed42a4990c6c6fc4bec398

springdoc:
  api-docs:
    enabled: ${herodotus.platform.swagger.enabled}
    resolve-schema-properties: true
  swagger-ui:
    disable-swagger-default-url: true
    enabled: ${herodotus.platform.swagger.enabled}
    operations-sorter: method
    show-common-extensions: true
    show-extensions: true
    oauth:
      use-pkce-with-authorization-code-grant: false
      app-name: ${spring.application.name}


mybatis-plus:
  global-config:
    banner: false
    db-config:
      table-underline: true
  configuration:
    cache-enabled: true
    map-underscore-to-camel-case: true

jetcache:
  statIntervalMinutes: 15
  areaInCacheName: false
  local:
    default:
      type: caffeine
      keyConvertor: fastjson2
      limit: 10000
  remote:
    default:
      type: redis.lettuce
      keyConvertor: fastjson2
      broadcastChannel: herodotus
      valueEncoder: java
      valueDecoder: java
      poolConfig:
        minIdle: ${spring.data.redis.lettuce.pool.min-idle}
        maxIdle: ${spring.data.redis.lettuce.pool.max-idle}
        maxTotal: ${spring.data.redis.lettuce.pool.max-active}
        maxWait: ${spring.data.redis.lettuce.pool.max-wait}
      uri:
        - redis://${spring.data.redis.password}@${spring.data.redis.host}:${spring.data.redis.port}/${spring.data.redis.database}


herodotus:
  platform:
    swagger:
      # Swagger中不知道哪里包含Kafka的注解，会自动启动，如果不连接到Kafka会导致启动失败。暂时没有解决，先取消掉。
      enabled: false
  cache:
    instances:
      data-upms-sys-employee-:
        expire: 2h
  endpoint:
    issuer-uri: http://localhost:${server.port}
  assistant:
    captcha:
      graphics:
        letter: num_and_upper_char
        font: action
    access:
      justauth:
        enabled: true
        configs:
          GITEE:
            client-id: 7c1623d76f39097579ddcae8a061
            client-secret: 8c343cad9ca732d54242f
            redirect-uri: http://aw255/social/oauth2/callback/GITEE
          OSCHINA:
            client-id: 7c1623d76f39097579123e8
            client-secret: 8c343cad9ca732d54242f002
            redirect-uri: http://192.168.101.10:8847/dante-cloud-uaa/oauth/social/gitee
  oss:
    dialect: minio
    proxy:
      source: http://localhost:3000/api
      destination: http://127.0.0.1:9000
    minio:
      endpoint: http://127.0.0.1:9000
      access-key: herodotus
      secret-key: herodotus
    s3:
      endpoint: http://127.0.0.1:9000
      access-key: herodotus
      secret-key: herodotus

logging:
  file:
    name: logs/${spring.application.name}.log
  level:
    root: INFO
    org.springframework: info
    org.springframework.security: debug
    org.springframework.web: info
    cn.herodotus: debug
    com.alicp.jetcache: info

---
# 开发环境配置
spring:
  config:
    activate:
      on-profile: development-mysql8
  sql:
    init:
      mode: never
      platform: mysql
      continue-on-error: false
      encoding: UTF-8
      username: ${spring.datasource.username}
      password: ${spring.datasource.password}
      data-locations:
        #        - classpath:sqls/oss-data-mysql.sql
        - classpath:sqls/oss-data-postgresql.sql

  datasource:
    driver-class-name: com.p6spy.engine.spy.P6SpyDriver
    url: jdbc:p6spy:mysql://127.0.0.1:13306/dante_athena?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
    username: athena
    password: athena
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      pool-name: Hikari
      connection-test-query: SELECT 1
      minimum-idle: 5
      maximum-pool-size: 20
      # Lowest acceptable connection timeout is 250 ms. Default: 30000 (30 seconds)
      connection-timeout: 30000
      # The minimum allowed value is 10000ms (10 seconds). Default: 600000 (10 minutes)
      idle-timeout: 120000
      # We strongly recommend setting this value, and it should be at least 30 seconds less than any database or infrastructure imposed connection time limit. Default: 1800000 (30 minutes)
      max-lifetime: 1800000
      # Lowest acceptable validation timeout is 250 ms. Default: 5000
      validation-timeout: 5000
      leak-detection-threshold: 60000
      data-source-properties:
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        cachePrepStmts: true
        cacheResultSetMetadata: true
        cacheServerConfiguration: true
        useServerPrepStmts: true
        useLocalSessionState: true
        rewriteBatchedStatement: true
        elideSetAutoCommits: true
        maintainTimeStats: false
  jpa:
    database: mysql
    database-platform: ${spring.jpa.database}
    generate-ddl: true
    open-in-view: true
    hibernate:
      # DDL mode. This is actually a shortcut for the "hibernate.hbm2ddl.auto" property. Default to "create-drop" when using an embedded database, "none" otherwise.spring.jpa.hibernate.ddl-auto=update
      ddl-auto: update
      naming:
        physical-strategy: cn.herodotus.engine.data.hibernate.HerodotusPhysicalNamingStrategy
    properties:
      jakarta:
        persistence:
          sharedCache:
            mode: ENABLE_SELECTIVE
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        format_sql: true
        show_sql: true
        generate_statistics: false
        order_inserts: true
        order_updates: true
        default_batch_fetch_size: 30
        cache:
          use_query_cache: true
          use_second_level_cache: true
          use_minimal_puts: true
          region:
            factory_class: cn.herodotus.engine.data.hibernate.spi.cache.HerodotusRegionFactory
        jakarta:
          cache:
            missing_cache_strategy: create
        boot:
          allow_jdbc_metadata_access: true
        connection:
          handling_mode: DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION
        jdbc:
          batch_size: 50
        query:
          in_clause_parameter_padding: true
          fail_on_pagination_over_collection_fetch: true
          optimizer:
            enabled: true
  data:
    redis:
      database: 5
      host: 192.168.101.10
      password:
      port: 16379
      timeout: 3000ms
      lettuce:
        pool:
          enabled: true
          # 最大活跃连接数 (根据负载动态调整)。计算公式：max-active = (平均QPS × 平均耗时(秒)) / 可用实例数 + 缓冲值
          max-active: 64
          # 最大空闲连接数 (建议max-active的50-75%)。足够覆盖流量波谷，避免频繁创建连接
          max-idle: 32
          # 最小空闲连接数 (保持预热连接)。保持预热连接，应对突发流量
          min-idle: 8
          # 短等待避免线程阻塞，超时快速失败
          max-wait: 5000ms
          # 空闲连接检查间隔
          time-between-eviction-runs: 30s
        shutdown-timeout: 200ms
  thymeleaf:
    mode: HTML
    cache: false
  security:
    oauth2:
      resourceserver:
        opaquetoken:
          client-id: 14a9cf797931430896ad13a6b1855611
          client-secret: a05fe1fc50ed42a4990c6c6fc4bec398

springdoc:
  api-docs:
    enabled: ${herodotus.platform.swagger.enabled}
    resolve-schema-properties: true
  swagger-ui:
    enabled: ${herodotus.platform.swagger.enabled}
    disable-swagger-default-url: true
    operations-sorter: method
    show-common-extensions: true
    show-extensions: true
    oauth:
      use-pkce-with-authorization-code-grant: false
      app-name: ${spring.application.name}


mybatis-plus:
  global-config:
    banner: false
    db-config:
      table-underline: true
  configuration:
    cache-enabled: true
    map-underscore-to-camel-case: true

jetcache:
  statIntervalMinutes: 15
  areaInCacheName: false
  local:
    default:
      type: caffeine
      keyConvertor: fastjson2
      limit: 10000
  remote:
    default:
      type: redis.lettuce
      keyConvertor: fastjson2
      broadcastChannel: herodotus
      valueEncoder: java
      valueDecoder: java
      poolConfig:
        minIdle: ${spring.data.redis.lettuce.pool.min-idle}
        maxIdle: ${spring.data.redis.lettuce.pool.max-idle}
        maxTotal: ${spring.data.redis.lettuce.pool.max-active}
        maxWait: ${spring.data.redis.lettuce.pool.max-wait}
      uri:
        - redis://${spring.data.redis.password}@${spring.data.redis.host}:${spring.data.redis.port}/${spring.data.redis.database}


herodotus:
  platform:
    swagger:
      # Swagger中不知道哪里包含Kafka的注解，会自动启动，如果不连接到Kafka会导致启动失败。暂时没有解决，先取消掉。
      enabled: false
  cache:
    instances:
      data-upms-sys-employee-:
        expire: 2h
  endpoint:
    issuer-uri: http://localhost:${server.port}
  assistant:
    captcha:
      graphics:
        letter: num_and_upper_char
        font: action
    access:
      justauth:
        enabled: true
        configs:
          GITEE:
            client-id: 7c1623d76f39097579ddcae8a061
            client-secret: 8c343cad9ca732d54242f
            redirect-uri: http://aw255/social/oauth2/callback/GITEE
          OSCHINA:
            client-id: 7c1623d76f39097579123e8
            client-secret: 8c343cad9ca732d54242f002
            redirect-uri: http://192.168.101.10:8847/dante-cloud-uaa/oauth/social/gitee
  oss:
    dialect: minio
    proxy:
      source: http://localhost:3000/api
      destination: http://127.0.0.1:9000
    minio:
      endpoint: http://127.0.0.1:9000
      access-key: herodotus
      secret-key: herodotus
    s3:
      endpoint: http://127.0.0.1:9000
      access-key: herodotus
      secret-key: herodotus

logging:
  file:
    name: logs/dante-cloud-athena.log
  level:
    root: info
    org.springframework: info
    org.springframework.security: info
    org.springframework.web: info
    cn.herodotus: info
    com.alicp.jetcache: info


---
# 开发环境配置
spring:
  config:
    activate:
      on-profile: development-opengauss
  sql:
    init:
      mode: never
      platform: postgresql
      continue-on-error: true
      encoding: UTF-8
      username: ${spring.datasource.username}
      password: ${spring.datasource.password}
      # 第一种方式启动的时候 Jpa 会自动创建表，import.sql 只负责创建表单后的初始化数据。第二种方式启动的时候不会创建表，需要在初始化脚本中判断表是否存在，再初始化脚本的步骤
      # refer: https://www.cnblogs.com/ityouknow/p/7089170.html
      data-locations:
        - classpath:sqls/oss-data-postgresql.sql
  #        - classpath:sqls/oss-data-mysql.sql

  datasource:
    driver-class-name: com.p6spy.engine.spy.P6SpyDriver
    url: jdbc:p6spy:opengauss://localhost:15432/dante_athena
    username: athena
    password: athena
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      pool-name: Hikari
      connection-test-query: SELECT 1
      minimum-idle: 5
      maximum-pool-size: 20
      # Lowest acceptable connection timeout is 250 ms. Default: 30000 (30 seconds)
      connection-timeout: 30000
      # The minimum allowed value is 10000ms (10 seconds). Default: 600000 (10 minutes)
      idle-timeout: 120000
      # We strongly recommend setting this value, and it should be at least 30 seconds less than any database or infrastructure imposed connection time limit. Default: 1800000 (30 minutes)
      max-lifetime: 1800000
      # Lowest acceptable validation timeout is 250 ms. Default: 5000
      validation-timeout: 5000
      leak-detection-threshold: 60000
      data-source-properties:
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        cachePrepStmts: true
        cacheResultSetMetadata: true
        cacheServerConfiguration: true
        useServerPrepStmts: true
        useLocalSessionState: true
        rewriteBatchedStatement: true
        elideSetAutoCommits: true
        maintainTimeStats: false
  jpa:
    database: postgresql
    database-platform: ${spring.jpa.database}
    generate-ddl: true
    open-in-view: true
    hibernate:
      # DDL mode. This is actually a shortcut for the "hibernate.hbm2ddl.auto" property. Default to "create-drop" when using an embedded database, "none" otherwise.spring.jpa.hibernate.ddl-auto=update
      ddl-auto: update
      naming:
        physical-strategy: cn.herodotus.engine.data.hibernate.HerodotusPhysicalNamingStrategy
    properties:
      jakarta:
        persistence:
          sharedCache:
            mode: ENABLE_SELECTIVE
      hibernate:
        dialect: cn.herodotus.engine.data.hibernate.dialect.OpenGaussDialect
        format_sql: true
        show_sql: false
        generate_statistics: false
        order_inserts: true
        order_updates: true
        default_batch_fetch_size: 30
        cache:
          use_query_cache: true
          use_second_level_cache: true
          use_minimal_puts: true
          region:
            factory_class: cn.herodotus.engine.data.hibernate.spi.cache.HerodotusRegionFactory
        jakarta:
          cache:
            missing_cache_strategy: create
        boot:
          allow_jdbc_metadata_access: true
        connection:
          handling_mode: DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION
        jdbc:
          batch_size: 50
        query:
          in_clause_parameter_padding: true
          fail_on_pagination_over_collection_fetch: true
          optimizer:
            enabled: true
  data:
    redis:
      database: 6
      host: 192.168.101.10
      password:
      port: 16379
      timeout: 3000ms
      lettuce:
        pool:
          enabled: true
          # 最大活跃连接数 (根据负载动态调整)。计算公式：max-active = (平均QPS × 平均耗时(秒)) / 可用实例数 + 缓冲值
          max-active: 64
          # 最大空闲连接数 (建议max-active的50-75%)。足够覆盖流量波谷，避免频繁创建连接
          max-idle: 32
          # 最小空闲连接数 (保持预热连接)。保持预热连接，应对突发流量
          min-idle: 8
          # 短等待避免线程阻塞，超时快速失败
          max-wait: 5000ms
          # 空闲连接检查间隔
          time-between-eviction-runs: 30s
        shutdown-timeout: 200ms
    redisson:
      enabled: false
      single-server-config:
        address: redis://${spring.data.redis.host}:${spring.data.redis.port}
  #        password: ${spring.data.redis.password}
  thymeleaf:
    mode: HTML
    cache: false
  security:
    oauth2:
      resourceserver:
        opaquetoken:
          client-id: 14a9cf797931430896ad13a6b1855611
          client-secret: a05fe1fc50ed42a4990c6c6fc4bec398

springdoc:
  api-docs:
    resolve-schema-properties: true
  swagger-ui:
    disable-swagger-default-url: true
    operations-sorter: method
    show-common-extensions: true
    show-extensions: true
    oauth:
      use-pkce-with-authorization-code-grant: false
      app-name: ${spring.application.name}


mybatis-plus:
  global-config:
    banner: false
    db-config:
      table-underline: true
  configuration:
    cache-enabled: true
    map-underscore-to-camel-case: true

jetcache:
  statIntervalMinutes: 15
  areaInCacheName: false
  local:
    default:
      type: caffeine
      keyConvertor: fastjson2
      limit: 10000
  remote:
    default:
      type: redis.lettuce
      keyConvertor: fastjson2
      broadcastChannel: herodotus
      valueEncoder: java
      valueDecoder: java
      poolConfig:
        minIdle: ${spring.data.redis.lettuce.pool.min-idle}
        maxIdle: ${spring.data.redis.lettuce.pool.max-idle}
        maxTotal: ${spring.data.redis.lettuce.pool.max-active}
        maxWait: ${spring.data.redis.lettuce.pool.max-wait}
      uri:
        - redis://${spring.data.redis.password}@${spring.data.redis.host}:${spring.data.redis.port}/${spring.data.redis.database}


herodotus:
  platform:
    swagger:
      # Swagger中不知道哪里包含Kafka的注解，会自动启动，如果不连接到Kafka会导致启动失败。暂时没有解决，先取消掉。
      enabled: false
  cache:
    instances:
      data-upms-sys-employee-:
        expire: 2h
  endpoint:
    issuer-uri: http://localhost:${server.port}
  assistant:
    captcha:
      graphics:
        letter: num_and_upper_char
        font: action
    access:
      justauth:
        enabled: true
        configs:
          GITEE:
            client-id: 7c1623d76f39097579ddcae8a061
            client-secret: 8c343cad9ca732d54242f
            redirect-uri: http://aw255/social/oauth2/callback/GITEE
          OSCHINA:
            client-id: 7c1623d76f39097579123e8
            client-secret: 8c343cad9ca732d54242f002
            redirect-uri: http://192.168.101.10:8847/dante-cloud-uaa/oauth/social/gitee
  oss:
    dialect: minio
    proxy:
      source: http://localhost:3000/api
      destination: http://127.0.0.1:9000
    minio:
      endpoint: http://127.0.0.1:9000
      access-key: herodotus
      secret-key: herodotus
    s3:
      endpoint: http://127.0.0.1:9000
      access-key: herodotus
      secret-key: herodotus

logging:
  file:
    name: logs/${spring.application.name}.log
  level:
    root: INFO
    org.springframework: info
    org.springframework.security: info
    org.springframework.web: info
    cn.herodotus: debug
    com.alicp.jetcache: info

---
# 生产环境配置
spring:
  config:
    activate:
      on-profile: production